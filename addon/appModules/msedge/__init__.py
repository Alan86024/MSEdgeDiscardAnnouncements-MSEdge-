# MSEdgeDiscardAnnouncements: An appModule to discard some of notifications generated by Microsoft Edge
# Copyright (C) 2022-2023 Beqa Gozalishvili
# Released under GPL 2

import addonHandler
import api
import appModuleHandler
import config
import eventHandler
import gui
from NVDAObjects.UIA import UIA
import wx
from .settings import settingItems
    
addonHandler.initTranslation()
addonInstance = addonHandler.getCodeAddon()
addonName = addonInstance.name
addonSummary = addonInstance.manifest["summary"]

config.conf.spec[addonName] = {setting.configKey: setting.defaultValue for setting in settingItems}

class AppModule(appModuleHandler.AppModule):
    activityIDs = []

    def __init__(self, processID, appName):
        super().__init__(processID, appName)
        eventHandler.requestEvents("gainFocus",processId=processID,windowClassName="Chrome_WidgetWin_2")
        categoryClasses = gui.settingsDialogs.NVDASettingsDialog.categoryClasses
        if not (MSEdgeDiscardAnnouncementsPanel in categoryClasses):
            categoryClasses.append(MSEdgeDiscardAnnouncementsPanel)

    def terminate(self):
        super().terminate()
        categoryClasses = gui.settingsDialogs.NVDASettingsDialog.categoryClasses
        if (MSEdgeDiscardAnnouncementsPanel in categoryClasses):
            gui.settingsDialogs.NVDASettingsDialog.categoryClasses.remove(MSEdgeDiscardAnnouncementsPanel)

    def event_NVDAObject_init(self, obj):
        if not "ShowSuggestions" in self.activityIDs:
            return
        if isinstance(obj, UIA) and obj.UIAElement.CurrentClassName == "OmniboxResultView":
            obj.isDescendantOf = lambda obj: False

    def getActivityIDsFromConfig(self):
        edgeConf = config.conf[addonName]
        self.activityIDs = [k for k, v in edgeConf.items() if type(v) == bool and v == False]

    def event_appModule_gainFocus(self):
        self.getActivityIDsFromConfig()

    def event_UIA_notification(self, obj, nextHandler, activityId=None, **kwargs):
        if activityId in self.activityIDs: return
        if activityId in ["HubDownloadsNewDownload", "HubDownloadsCompleteState"]:
            obj = obj
            while obj and obj.parent.processID == api.getFocusObject().processID:
                obj = obj.parent
            if obj.windowHandle != api.getForegroundObject().windowHandle:
                return
        nextHandler()

class MSEdgeDiscardAnnouncementsPanel(gui.settingsDialogs.SettingsPanel):
    title = addonSummary

    def makeSettings(self, sizer):
        self.config = config.conf[addonName]
        sHelper = gui.guiHelper.BoxSizerHelper(self, sizer=sizer)
        notificationsLabel = _("&Configure MSEdge notifications")
        self.settingChoices = [setting.label for setting in settingItems]
        self.settingList=sHelper.addLabeledControl(notificationsLabel, gui.nvdaControls.CustomCheckListBox, choices=self.settingChoices)
        self.settingList.CheckedItems = [index for index, setting in enumerate(settingItems) if self.config[setting.configKey]]
        self.settingList.Select(0)

    def onSave(self):
                [self.config.__setitem__(setting.configKey, self.settingList.IsChecked(index)) for index, setting in enumerate(settingItems)]
